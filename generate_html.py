from src.content import content_manager

from src.content.app_data import AppData
from src.utils import reader_util
import os
import json
import base64
import sys

import logging
log = logging.getLogger(__name__)


app_data = AppData()

FILES_DIRECTORY = "html/sv"

# Project info
# Meta info
# Required files:

# Section: a
# content/arabic/quran-uthmani.txt

# Section: b
# content/translations/en.yusufali.txt
# content/translations/en.shakir.txt
# content/translations/ur.maududi.txt
# content/translations/ur.jalandhry.txt
#

# Section: c
# content/metadata/surah_metadata.json - {generated with same name by generate_metadata_mapping.py}
# content/metadata/ruku_to_surah_mapping.json - {former name: ruku_to_surah_map.json, generated by: generate_metadata_mapping.py}
# content/metadata/verse_number_to_root_sequence_mapping.json - {former name: ayah_root_sequence.json, generated by: generate_metadata_mapping.py}
# content/metadata/root_statistics.json - {generated with same name by generate_metadata_mapping.py}

# Section: d
# !!Note: Only file which has not been commited yet.
# content/translations/root-meaning-v2.csv

# Section: e
# !!Note: Following file is required by generate_metadata_mapping.py
# content/metadata/quranic-corpus-morphology-0.4.txt

# Section: f
# Usage following file generate metadata content:
# generate_metadata_mapping.py

# Section: g
# Steps to regenerate content/metadata/* files
# 1. ensure that content/metadata/quranic-corpus-morphology-0.4.txt is in place, (which is commited.)
# 2. run generate_metadata_mapping.py so that metadata file are generated
# 3. perform renaming and moving operations mentioned in section c
# 4. ready.

def write_to_file(file_name, content):
    with open(file_name, "w") as file_pointer:
        file_pointer.write(content)

    log.info("File write complete: %s", file_name)

def setup_defaults():
    log_formatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)
    root_logger.addHandler(console_handler)

def safe_mkdir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

if __name__ == "__main__":
    setup_defaults()

    # content_directory = os.path.join("./", FILES_DIRECTORY)
    content_directory = "../sv/"

    safe_mkdir(content_directory)
    log.info("Files will be written to the directory: %s", content_directory)

    surah_metadata = reader_util.load_json_from_file("content/metadata/surah_metadata.json")
    write_to_file(os.path.join(content_directory, "lib", "metadata.js"), "var metadata = JSON.parse(atob('%s'));" % base64.standard_b64encode(json.dumps(surah_metadata)))

    ruku_to_surah_mapping = reader_util.load_json_from_file("content/metadata/ruku_to_surah_mapping.json")
    verse_number_to_root_sequence_mapping = reader_util.load_json_from_file("content/metadata/verse_number_to_root_sequence_mapping.json")
    reader_util.load_json_from_file("content/metadata/root_statistics.json")

    for i in range(1, 557):
    #for i in range(10, 11):
        content = content_manager.get_ruku_content(app_data, i)
        file_name = os.path.join(os.path.join(content_directory, "content"), "r-%d.js" % i)
        log.info("Writing to file: %s", file_name)
        content_to_write = "var rukuContent = JSON.parse(atob('%s'));" % base64.standard_b64encode(json.dumps(content))
        write_to_file(file_name, content_to_write)
        log.info("Generating data for Ruku Number: %d", i)
        # ruku_number = str(i)

    # next item changes in : content_manager.py
    # @ ayah_details["root_sequence"] = app_data.verse_number_to_root_sequence_mapping[str_ayah_number]
    # add root_sequence_with_details

    # last stopped @ content_manager.py @ 78
